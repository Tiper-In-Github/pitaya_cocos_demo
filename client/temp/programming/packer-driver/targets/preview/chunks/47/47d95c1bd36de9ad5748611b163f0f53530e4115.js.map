{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/logic/login/LoginController.ts"],"names":["LoginController","proto","Http","Session","starx","window","Start","console","log","OnEntry","req","Env","http","ReqEntry","EnumEnv","Dev","GameVersion","ResVersion","Secret","reqByte","encode","finish","respByte","Post","resp","RespEntry","decode","ErrCode","common","ErrorCode","OK","RegisterUrl","LoginUrl","TcpUrl","Host","Port","WsUrl","WebSocketUrl","OnRegister","account","password","Account","Password","ReqRegister","OnLogin","ReqLogin","RespLogin","token","Token","OnConnectorAuth","init","host","port","request","lobby","ReqAuth","e","RespAuth"],"mappings":"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","sourcesContent":["import proto from \"../../../../proto_js/proto.js\";\nimport { Http } from \"../../net/http/Http\";\nimport { PitayaWs } from \"../../net/pitaya/Pitaya\";\nimport { Session } from \"./LoginModel\";\n\nconst starx = (window as any).starx;\n\nexport class LoginController {\n\n\n    public static async Start() {\n        console.log(\"LoginController Start!\")\n        await this.OnEntry()\n    }\n\n    public static async OnEntry() {\n        let req: proto.http.IReqEntry = {\n            Env: proto.http.ReqEntry.EnumEnv.Dev,  //测试的客户端\n            GameVersion: \"1.0.0\",\n            ResVersion: \"1.0.0\",\n            Secret: \"s88it786hihfbwsdfgxtxcv_ysdyxv\",\n        }\n        let reqByte = proto.http.ReqEntry.encode(req).finish()\n        let respByte = await Http.Post(\"http://127.0.0.1:8088/entry\", reqByte)\n        let resp = proto.http.RespEntry.decode(respByte)\n        console.log(\"OnEntry resp=\", resp)\n\n        if (resp.ErrCode == proto.common.ErrorCode.OK) {\n            Session.RegisterUrl = resp.RegisterUrl\n            Session.LoginUrl = resp.LoginUrl\n            Session.TcpUrl.Host = resp.TcpUrl?.Host as string\n            Session.TcpUrl.Port = resp.TcpUrl?.Port as number\n            Session.WsUrl.Host = resp.WebSocketUrl?.Host as string\n            Session.WsUrl.Port = resp.WebSocketUrl?.Port as number\n\n\n        }\n    }\n\n    /**\n     * 注册\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnRegister(account: string, password: string) {\n        let req: proto.http.IReqRegister = {\n            Account: account,\n            Password: password,\n        }\n        let reqByte = proto.http.ReqRegister.encode(req).finish()\n        let respByte = await Http.Post(Session.RegisterUrl, reqByte)\n        let resp = proto.http.RespEntry.decode(respByte)\n        console.log(\"OnRegister resp=\", resp)\n    }\n\n    /**\n     * 登录\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnLogin(account: string, password: string) {\n        let req: proto.http.IReqLogin = {\n            Account: account,\n            Password: password,\n        }\n        let reqByte = proto.http.ReqLogin.encode(req).finish()\n        let respByte = await Http.Post(Session.LoginUrl, reqByte)\n        let resp = proto.http.RespLogin.decode(respByte)\n        console.log(\"OnLogin resp=\", resp)\n        Session.Account.token = resp.Token\n    }\n\n\n    /**\n     * 断开gate服务器，转而连接connector服务器，连接需要检测登录的授权码\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnConnectorAuth() {\n\n        // await PitayaWs.Init(Session.WsUrl.Host, Session.WsUrl.Port)\n        // let req = { Token: Session.Account.token }\n        // let reqByte = proto.lobby.ReqAuth.encode(req).finish()\n        // PitayaWs.Call(\"Connector.Handler.CallAuth\", reqByte)\n        starx.init(\n            {\n                host: Session.WsUrl.Host,\n                port: Session.WsUrl.Port\n            },\n            () => {\n               \n                starx.request(\"Connector.Handler.CallAuth\", proto.lobby.ReqAuth.encode({ Token: Session.Account.token }).finish(), (e: any) => {\n                    let resp = proto.lobby.RespAuth.decode(e);\n                    console.log(\" Connector.Handler.CallAuth, success resp= \",  resp);\n                });\n            })\n\n    }\n\n\n}"]}