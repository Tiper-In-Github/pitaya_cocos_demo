{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/net/pitaya/Pitaya.ts"],"names":["Pitaya","Pomelo","Init","host","port","Promise","resolve","reject","onConnectSuccess","url","connector","ws","WebSocket","binaryType","onclose","ev","console","log","onerror","onmessage","onMessage","onopen","sendHandShake","handshakeBuffer","type","version","rsa","msg","Protocol","strencode","JSON","stringify","pkg","Package","encode","TYPE_HANDSHAKE","send","buffer","msgs","decode","data","Array","isArray","i","length","dispatch","parse","strdecode","body","code","obj","TYPE_HANDSHAKE_ACK","TYPE_HEARTBEAT","heartbeat","TYPE_DATA","onData","TYPE_KICK","onKick","Message","route","TYPE_RESPONSE","cb","callbacks","get","id","delete","Call","reqId","TYPE_REQUEST","packet","set","routeMap","Map"],"mappings":"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","sourcesContent":["import { Pomelo } from \"./Pomelo\";\n\nexport class Pitaya {\n    //websocket\n    private static ws: WebSocket;\n    //回调map\n    private static callbacks = new Map<number, Function>();\n    //路由map\n    private static routeMap = new Map<number, string>();\n    //请求的id,每次请求自增1\n    private static reqId: number = 0\n    //整个pitaya连接成功后的回调\n    private static onConnectSuccess: Function | null = null;\n\n    //step1:包装成await/async\n    public static async Init(host: string, port: number) {\n        return new Promise((resolve, reject) => {\n            this.onConnectSuccess = () => {\n                resolve(true)\n            }\n            let url = `ws://${host}:${port}`\n            this.connector(url)\n        })\n    }\n\n    //step2:初始化\n    private static connector(url: string) {\n        this.ws = new WebSocket(url);\n        this.ws.binaryType = 'arraybuffer';\n        this.ws.onclose = (ev: any) => { console.log(\"websocket close\", ev) };\n        this.ws.onerror = (ev: any) => { console.log(\"websocket err\", ev) };\n        this.ws.onmessage = (ev: any) => { this.onMessage(ev) };\n        this.ws.onopen = (ev: any) => {\n            this.sendHandShake()\n        };\n    }\n\n    //step3:发送handshake\n    private static async sendHandShake() {\n        let handshakeBuffer = {\n            'sys': {\n                type: \"pitaya_cocos\",\n                version: \"1.0.0\",\n                rsa: {}\n            },\n            'user': {}\n        };\n        let msg = Pomelo.Protocol.strencode(JSON.stringify(handshakeBuffer))\n        let pkg = Pomelo.Package.encode(Pomelo.Package.TYPE_HANDSHAKE, msg);\n        this.ws.send(pkg.buffer);\n    }\n\n\n    //step4:收到消息,分发\n    private static onMessage(ev: any) {\n        let msgs = Pomelo.Package.decode(ev.data);\n        if (Array.isArray(msgs)) {\n            for (let i = 0; i < msgs.length; i++) {\n                let msg = msgs[i];\n                this.dispatch(msg)\n            }\n        } else {\n            this.dispatch(msgs)\n        }\n    }\n\n    /**\n     * step5, 解析消息分发器\n     * @param msg 收到的服务器消息\n     * @returns \n     */\n    private static dispatch(msg: { type: number, body?: Uint8Array }) {\n        switch (msg.type) {\n            case Pomelo.Package.TYPE_HANDSHAKE:\n                {\n                    let data = JSON.parse(Pomelo.Protocol.strdecode(msg.body as Uint8Array));\n                    console.log(\" handshake msg.code\", data.code)\n                    if (data.code === 501) {\n                        return;\n                    }\n                    if (data.code !== 200) {\n                        return;\n                    }\n\n                    //step6: handshake回应，不然服务器会断开\n                    let obj = Pomelo.Package.encode(Pomelo.Package.TYPE_HANDSHAKE_ACK);\n                    this.ws.send(obj.buffer);\n\n                    //step7: 连接成功回调，加到step1的Promise\n                    if (this.onConnectSuccess) {\n                        this.onConnectSuccess()\n                    }\n                }\n                break\n            case Pomelo.Package.TYPE_HEARTBEAT:\n                this.heartbeat(msg.body)\n                break\n            case Pomelo.Package.TYPE_DATA:\n                this.onData(msg.body as ArrayBuffer)\n                break\n            case Pomelo.Package.TYPE_KICK:\n                this.onKick(msg.body)\n                break\n        }\n    }\n\n\n    private static heartbeat(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onKick(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onData(data: ArrayBuffer) {\n        let msg = Pomelo.Message.decode(data);\n\n        if (msg.route) {\n            console.log(\"on data, msg.route=\", msg.route)\n        }\n\n        if (msg.type = Pomelo.Message.TYPE_RESPONSE) {\n            var cb = this.callbacks.get(msg.id);\n            this.callbacks.delete(msg.id);\n            if (cb) {\n                cb(msg.body);\n            }\n        }\n    }\n\n    /**\n     * Call方法，即req-resp模式\n     * @param route 路由\n     * @param msg \n     * @returns \n     */\n    public static async Call(route: string, data: any) {\n        if (!route) {\n            return;\n        }\n        return new Promise((resolve, reject) => {\n            this.reqId++;\n            let type = Pomelo.Message.TYPE_REQUEST\n\n            let msg = Pomelo.Message.encode(this.reqId, type, 0, route, data);\n            console.log(\"[ts] 11111111 msg= \", msg)\n            let packet = Pomelo.Package.encode(Pomelo.Package.TYPE_DATA, msg);\n            console.log(\"[ts] 22222222 packet= \", packet)\n            this.ws.send(packet.buffer);\n            this.callbacks.set(this.reqId, (data: any) => {\n                resolve(data)\n            });\n            this.routeMap.set(this.reqId, route);\n        })\n    };\n\n\n}\n\n"]}