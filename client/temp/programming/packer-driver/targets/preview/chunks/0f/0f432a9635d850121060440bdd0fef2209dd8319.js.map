{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/net/pitaya/Pitaya.ts"],"names":["PitayaWs","proto","Session","Pomelo","starx","window","protocol","Init","host","port","handshakeBuffer","type","version","rsa","Promise","reslove","reject","_ws","WebSocket","_reqId","binaryType","onclose","ev","console","log","onerror","onmessage","dispatch","msg","Package","TYPE_HANDSHAKE","handshake","body","TYPE_HEARTBEAT","heartbeat","TYPE_DATA","onData","TYPE_KICK","onKick","msgs","decode","Array","isArray","i","length","onopen","handshakePkg","Protocol","strencode","JSON","stringify","pkg","encode","send","buffer","data","Message","route","resp","lobby","RespAuth","Call","TYPE_REQUEST","testStartX","init","WsUrl","Host","Port","request","ReqAuth","Token","Account","token","finish","e"],"mappings":"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","sourcesContent":["import proto from \"../../../../proto_js/proto.js\";\nimport { Session } from \"../../logic/login/LoginModel\";\nimport { Pomelo } from \"./Pomelo\";\n\n\nconst starx = (window as any).starx\nconst protocol = (window as any).protocol\nexport class PitayaWs {\n\n    private static _ws: WebSocket;\n\n    private static _reqId: number\n\n    public static async Init(host: string, port: number) {\n\n        let handshakeBuffer = {\n            'sys': {\n                type: \"pitaya_cocos\",\n                version: \"1.0.0\",\n                rsa: {}\n            },\n            'user': {}\n        };\n\n        return new Promise((reslove, reject) => {\n            this._ws = new WebSocket('ws://' + host + \":\" + port);\n            this._reqId = 0;\n            this._ws.binaryType = 'arraybuffer';\n            this._ws.onclose = (ev: Event) => {\n                console.log(\"websocket close\", ev)\n                reject(ev)\n            };\n            this._ws.onerror = (ev: Event) => {\n                console.log(\"websocket err\", ev)\n                reject(ev)\n            };\n            this._ws.onmessage = (ev: any) => {\n                console.log(\"websocket onmessage\", ev)\n                let dispatch = (msg: { type: number, body?: Uint8Array }) => {\n                    switch (msg.type) {\n                        case Pomelo.Package.TYPE_HANDSHAKE:\n                            this.handshake(msg.body)\n                            break\n                        case Pomelo.Package.TYPE_HEARTBEAT:\n                            this.heartbeat(msg.body)\n                            break\n                        case Pomelo.Package.TYPE_DATA:\n                            this.onData(msg.body as ArrayBuffer)\n                            break\n                        case Pomelo.Package.TYPE_KICK:\n                            this.onKick(msg.body)\n                            break\n                    }\n                }\n                let msgs = Pomelo.Package.decode(ev);\n                if (Array.isArray(msgs)) {\n                    for (let i = 0; i < msgs.length; i++) {\n                        let msg = msgs[i];\n                        dispatch(msg)\n                    }\n                    return\n                }\n                dispatch(msgs)\n            };\n\n            this._ws.onopen = (ev: Event) => {\n                let handshakePkg = Pomelo.Protocol.strencode(JSON.stringify(handshakeBuffer))\n                var pkg = Pomelo.Package.encode(Pomelo.Package.TYPE_HANDSHAKE, handshakePkg);\n                this._ws.send(pkg.buffer);\n\n                console.log(\"websocket open\", ev)\n                reslove(ev)\n            };\n        })\n    }\n\n    private static handshake(data?: ArrayBuffer) {\n\n    }\n\n    private static heartbeat(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onKick(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onData(data: ArrayBuffer) {\n        const msg = Pomelo.Message.decode(data);\n        if (msg.route == \"Connector.Handler.CallAuth\") {\n            let resp = proto.lobby.RespAuth.decode(msg.body)\n            console.log(\"Connector.Handler.CallAuth, resp=\", resp)\n        }\n    }\n\n\n    public static Call(route: string, data: any) {\n        this._reqId++;\n        let msg = protocol.Message.encode(this._reqId, Pomelo.Message.TYPE_REQUEST, 0, route, data);\n        let pkg = protocol.Package.encode(Pomelo.Package.TYPE_DATA, msg)\n        this._ws.send(pkg.buffer);\n\n\n        this.testStartX()\n    }\n\n\n    private static testStartX() {\n        starx.init(\n            {\n                host: Session.WsUrl.Host,\n                port: Session.WsUrl.Port\n            },\n            () => {\n\n                starx.request(\"Connector.Handler.CallAuth\", proto.lobby.ReqAuth.encode({ Token: Session.Account.token }).finish(), (e: any) => {\n                    let resp = proto.lobby.RespAuth.decode(e);\n                    console.log(\" Connector.Handler.CallAuth, success resp= \", resp);\n                });\n            })\n    }\n\n}\n\n"]}