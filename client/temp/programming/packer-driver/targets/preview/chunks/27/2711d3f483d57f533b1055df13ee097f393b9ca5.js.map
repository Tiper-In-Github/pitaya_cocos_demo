{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/logic/login/LoginController.ts"],"names":["LoginController","Http","Session","Start","console","log","OnEntry","req","pb_http","ReqEntry","Env","EnumEnv","Dev","GameVersion","ResVersion","Secret","respByte","Post","encode","resp","RespEntry","decode","OnRegister","account","password","ReqRegister","Account","Password","OnLogin","OnConnectorAuth"],"mappings":";;;6CAGaA,e;;;;;;;;;;;;;;;;;;;;;;AAHJC,MAAAA,I,iBAAAA,I;;AACAC,MAAAA,O,iBAAAA,O;;;;;;;iCAEIF,e,GAAN,MAAMA,eAAN,CAAsB;AAGA,eAALG,KAAK,GAAG;AAAA;;AAAA;AACxBC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,kBAAM,KAAI,CAACC,OAAL,EAAN;AAFwB;AAG3B;;AAG0B,eAAPA,OAAO,GAAG;AAAA;AAC1B,gBAAIC,GAAG,GAAG,IAAIC,OAAO,CAACC,QAAZ,EAAV;AACAF,YAAAA,GAAG,CAACG,GAAJ,GAAUF,OAAO,CAACC,QAAR,CAAiBE,OAAjB,CAAyBC,GAAnC,CAF0B,CAEgB;;AAC1CL,YAAAA,GAAG,CAACM,WAAJ,GAAkB,OAAlB;AACAN,YAAAA,GAAG,CAACO,UAAJ,GAAiB,OAAjB;AACAP,YAAAA,GAAG,CAACQ,MAAJ,GAAa,gCAAb;AAEA,gBAAIC,QAAQ,SAAS;AAAA;AAAA,8BAAKC,IAAL,CAAU,sBAAV,EAAkCT,OAAO,CAACC,QAAR,CAAiBS,MAAjB,CAAwBX,GAAxB,CAAlC,CAArB;AACA,gBAAIY,IAAI,GAAGX,OAAO,CAACY,SAAR,CAAkBC,MAAlB,CAAyBL,QAAzB,CAAX;AACAZ,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bc,IAA7B;AAT0B;AAU7B;AAID;AACJ;AACA;AACA;AACA;AACA;;;AACkC,eAAVG,UAAU,CAACC,OAAD,EAAkBC,QAAlB,EAAoC;AAAA;AAC9D,gBAAIjB,GAAG,GAAG,IAAIC,OAAO,CAACiB,WAAZ,EAAV;AAEA;AAAA;AAAA,8BAAKR,IAAL;AAEAV,YAAAA,GAAG,CAACmB,OAAJ,GAAcH,OAAd;AACAhB,YAAAA,GAAG,CAACoB,QAAJ,GAAeH,QAAf;AAEA;AAAA;AAAA,oCAAQD,OAAR,CAAgBA,OAAhB,GAA0BA,OAA1B;AACA;AAAA;AAAA,oCAAQA,OAAR,CAAgBC,QAAhB,GAA2BA,QAA3B;AAT8D;AAUjE;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAC+B,eAAPI,OAAO,CAACL,OAAD,EAAkBC,QAAlB,EAAoC,CAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAZ2D;AAa9D;AAGD;AACJ;AACA;AACA;AACA;AACA;;;AACuC,eAAfK,eAAe,GAAG,CAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAdkC;AAerC;;AApFwB,O","sourcesContent":["import { Http } from \"../../net/http/Http\";\nimport { Session } from \"./LoginModel\";\n\nexport class LoginController {\n\n\n    public static async Start() {\n        console.log(\"LoginController Start!\")\n        await this.OnEntry()\n    }\n\n\n    public static async OnEntry() {\n        let req = new pb_http.ReqEntry()\n        req.Env = pb_http.ReqEntry.EnumEnv.Dev;   //测试的客户端\n        req.GameVersion = \"1.0.0\"\n        req.ResVersion = \"1.0.0\"\n        req.Secret = \"s88it786hihfbwsdfgxtxcv_ysdyxv\"\n\n        let respByte = await Http.Post(\"127.0.0.1:8088/entry\", pb_http.ReqEntry.encode(req))\n        let resp = pb_http.RespEntry.decode(respByte)\n        console.log(\"OnEntry resp=\", resp)\n    }\n\n\n\n    /**\n     * 注册\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnRegister(account: string, password: string) {\n        let req = new pb_http.ReqRegister()\n\n        Http.Post\n\n        req.Account = account\n        req.Password = password\n\n        Session.account.account = account\n        Session.account.password = password\n    }\n\n    /**\n     * 登录\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnLogin(account: string, password: string) {\n        // let req: ProtocolGate.Login.Request = new ProtocolGate.Login.Request();\n        // req.account = account\n        // req.password = password\n        // let resp = await PinusUtil.call<ProtocolGate.Login.Request, ProtocolGate.Login.Response>(ProtocolGate.Login.Router, req)\n        // if (resp.errCode != ErrorCode.SUCCEED) {\n        //     console.log(ErrorCode2Str(resp.errCode))\n        //     return\n        // }\n        // Session.account.uid = resp.uid\n        // Session.account.token = resp.token\n        // Session.host = resp.host\n        // Session.port = resp.port\n    }\n\n\n    /**\n     * 断开gate服务器，转而连接connector服务器，连接需要检测登录的授权码\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnConnectorAuth() {\n        // //先与gate服务器断开连接\n        // PinusUtil.disconnect()\n        // //再与connector服务器连接\n        // await PinusUtil.init(Session.host, Session.port)\n        // //创建req\n        // let req: ProtocolConnector.Auth.Request = new ProtocolConnector.Auth.Request()\n        // req.token = Session.account.token\n        // req.uid = Session.account.uid\n        // //进行登录验证\n        // let resp = await PinusUtil.call<ProtocolConnector.Auth.Request, ProtocolConnector.Auth.Response>(ProtocolConnector.Auth.Router, req)\n        // if (resp.errCode != ErrorCode.SUCCEED) {\n        //     console.log(ErrorCode2Str(resp.errCode))\n        //     return\n        // }\n    }\n\n\n}"]}