{"version":3,"sources":["file:///Users/even/workspace/github/yilinershi/pitaya_cocos_demo/client/assets/scripts/logic/login/LoginController.ts"],"names":["LoginController","proto","Http","Pitaya","Session","starx","window","Start","console","log","OnEntry","req","Env","http","ReqEntry","EnumEnv","Dev","GameVersion","ResVersion","Secret","reqByte","encode","finish","respByte","Post","url","resp","RespEntry","decode","ErrCode","common","ErrorCode","OK","RegisterUrl","LoginUrl","TcpUrl","Host","Port","WsUrl","WebSocketUrl","OnRegister","account","password","Account","Password","ReqRegister","OnLogin","ReqLogin","RespLogin","token","Token","OnConnectorAuth","Init","lobby","ReqAuth","Call","RespAuth","PlayerData","NickName","BaseInfo","Gender","Avatar","Guid","TestChat","Push","data","pushData","chat","SyncChatInfo","notifyData","InputChatInfo","Channel","ChatGroup","World","Content","Notify"],"mappings":"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","sourcesContent":["import proto from \"../../../../proto_js/proto.js\";\nimport { Http } from \"../../net/http/Http\";\nimport { Pitaya, } from \"../../net/pitaya/Pitaya\";\nimport { Session } from \"./LoginModel\";\n\nconst starx = (window as any).starx;\n\nexport class LoginController {\n\n\n    private static url = \"http://127.0.0.1:8088/entry\"\n\n    public static async Start() {\n        console.log(\"LoginController Start!\")\n        await this.OnEntry()\n    }\n\n    public static async OnEntry() {\n        let req: proto.http.IReqEntry = {\n            Env: proto.http.ReqEntry.EnumEnv.Dev,  //测试的客户端\n            GameVersion: \"1.0.0\",\n            ResVersion: \"1.0.0\",\n            Secret: \"s88it786hihfbwsdfgxtxcv_ysdyxv\",\n        }\n        let reqByte = proto.http.ReqEntry.encode(req).finish()\n        let respByte = await Http.Post(this.url, reqByte)\n        let resp = proto.http.RespEntry.decode(respByte)\n        console.log(\"OnEntry resp=\", resp)\n\n        if (resp.ErrCode == proto.common.ErrorCode.OK) {\n            Session.RegisterUrl = resp.RegisterUrl\n            Session.LoginUrl = resp.LoginUrl\n            Session.TcpUrl.Host = resp.TcpUrl?.Host as string\n            Session.TcpUrl.Port = resp.TcpUrl?.Port as number\n            Session.WsUrl.Host = resp.WebSocketUrl?.Host as string\n            Session.WsUrl.Port = resp.WebSocketUrl?.Port as number\n        }\n    }\n\n    /**\n     * 注册\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnRegister(account: string, password: string) {\n        let req: proto.http.IReqRegister = {\n            Account: account,\n            Password: password,\n        }\n        let reqByte = proto.http.ReqRegister.encode(req).finish()\n        let respByte = await Http.Post(Session.RegisterUrl, reqByte)\n        let resp = proto.http.RespEntry.decode(respByte)\n        console.log(\"OnRegister resp=\", resp)\n\n    }\n\n    /**\n     * 登录\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnLogin(account: string, password: string) {\n        let req: proto.http.IReqLogin = {\n            Account: account,\n            Password: password,\n        }\n        let reqByte = proto.http.ReqLogin.encode(req).finish()\n        let respByte = await Http.Post(Session.LoginUrl, reqByte)\n        let resp = proto.http.RespLogin.decode(respByte)\n        console.log(\"OnLogin resp=\", resp)\n        Session.Account.token = resp.Token\n    }\n\n\n    public static async OnConnectorAuth() {\n        await Pitaya.Init(Session.WsUrl.Host, Session.WsUrl.Port)\n        let reqByte = proto.lobby.ReqAuth.encode({ Token: Session.Account.token }).finish()\n        let respByte = await Pitaya.Call(\"Connector.Handler.CallAuth\", reqByte)\n        if (reqByte) {\n            let resp = proto.lobby.RespAuth.decode(respByte)\n            if (resp.ErrCode != proto.common.ErrorCode.OK) {\n                return\n            }\n            Session.PlayerData.NickName = resp.BaseInfo?.NickName as string;\n            Session.PlayerData.Gender = resp.BaseInfo?.Gender as number;\n            Session.PlayerData.Avatar = resp.BaseInfo?.Avatar as string;\n            Session.PlayerData.Guid = resp.BaseInfo?.Guid as string;\n            console.log(\"session.playerData =\", Session.PlayerData)\n        }\n\n        this.TestChat()\n    }\n\n\n\n    //测试notify/push消息 -> chat\n    private static TestChat() {\n\n        Pitaya.Push(\"Chat.Handler.PushChat\", (data: any) => {\n            let pushData = proto.chat.SyncChatInfo.decode(data)\n            console.log(\"Chat.Handler.PushChat, pushData=\", pushData)\n        })\n\n        let notifyData = proto.chat.InputChatInfo.encode({\n            Channel: proto.chat.ChatGroup.World,\n            Content: \"hello world\"\n        }).finish()\n        Pitaya.Notify(\"Chat.Handler.NotifyChat\", notifyData)\n    }\n\n}"]}