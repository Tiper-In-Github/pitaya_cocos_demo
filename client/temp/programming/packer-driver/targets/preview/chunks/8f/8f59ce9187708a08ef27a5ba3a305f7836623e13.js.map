{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/net/pitaya/Pitaya.ts"],"names":["PitayaWs","proto","Session","Pomelo","starx","window","Init","host","port","handshakeBuffer","type","version","rsa","Promise","reslove","reject","_ws","WebSocket","_reqId","binaryType","onclose","ev","console","log","onerror","onmessage","dispatch","msg","Package","TYPE_HANDSHAKE","handshake","body","TYPE_HEARTBEAT","heartbeat","TYPE_DATA","onData","TYPE_KICK","onKick","msgs","decode","Array","isArray","i","length","onopen","handshakePkg","Protocol","strencode","JSON","stringify","pkg","encode","send","buffer","data","Message","route","resp","lobby","RespAuth","Call","TYPE_REQUEST","testStartX","init","WsUrl","Host","Port","request","ReqAuth","Token","Account","token","finish","e"],"mappings":";;;sDAOaA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AAPNC,MAAAA,K;;AACEC,MAAAA,O,iBAAAA,O;;AACAC,MAAAA,M,iBAAAA,M;;;;;;;AAGHC,MAAAA,K,GAASC,MAAD,CAAgBD,K;;0BAEjBJ,Q,GAAN,MAAMA,QAAN,CAAe;AAMM,eAAJM,IAAI,CAACC,IAAD,EAAeC,IAAf,EAA6B;AAAA;;AAAA;AAEjD,gBAAIC,eAAe,GAAG;AAClB,qBAAO;AACHC,gBAAAA,IAAI,EAAE,cADH;AAEHC,gBAAAA,OAAO,EAAE,OAFN;AAGHC,gBAAAA,GAAG,EAAE;AAHF,eADW;AAMlB,sBAAQ;AANU,aAAtB;AASA,mBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,cAAA,KAAI,CAACC,GAAL,GAAW,IAAIC,SAAJ,CAAc,UAAUV,IAAV,GAAiB,GAAjB,GAAuBC,IAArC,CAAX;AACA,cAAA,KAAI,CAACU,MAAL,GAAc,CAAd;AACA,cAAA,KAAI,CAACF,GAAL,CAASG,UAAT,GAAsB,aAAtB;;AACA,cAAA,KAAI,CAACH,GAAL,CAASI,OAAT,GAAoBC,EAAD,IAAe;AAC9BC,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,EAA/B;AACAN,gBAAAA,MAAM,CAACM,EAAD,CAAN;AACH,eAHD;;AAIA,cAAA,KAAI,CAACL,GAAL,CAASQ,OAAT,GAAoBH,EAAD,IAAe;AAC9BC,gBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,EAA7B;AACAN,gBAAAA,MAAM,CAACM,EAAD,CAAN;AACH,eAHD;;AAIA,cAAA,KAAI,CAACL,GAAL,CAASS,SAAT,GAAsBJ,EAAD,IAAa;AAC9BC,gBAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,EAAnC;;AACA,oBAAIK,QAAQ,GAAIC,GAAD,IAA8C;AACzD,0BAAQA,GAAG,CAACjB,IAAZ;AACI,yBAAK;AAAA;AAAA,0CAAOkB,OAAP,CAAeC,cAApB;AACI,sBAAA,KAAI,CAACC,SAAL,CAAeH,GAAG,CAACI,IAAnB;;AACA;;AACJ,yBAAK;AAAA;AAAA,0CAAOH,OAAP,CAAeI,cAApB;AACI,sBAAA,KAAI,CAACC,SAAL,CAAeN,GAAG,CAACI,IAAnB;;AACA;;AACJ,yBAAK;AAAA;AAAA,0CAAOH,OAAP,CAAeM,SAApB;AACI,sBAAA,KAAI,CAACC,MAAL,CAAYR,GAAG,CAACI,IAAhB;;AACA;;AACJ,yBAAK;AAAA;AAAA,0CAAOH,OAAP,CAAeQ,SAApB;AACI,sBAAA,KAAI,CAACC,MAAL,CAAYV,GAAG,CAACI,IAAhB;;AACA;AAZR;AAcH,iBAfD;;AAgBA,oBAAIO,IAAI,GAAG;AAAA;AAAA,sCAAOV,OAAP,CAAeW,MAAf,CAAsBlB,EAAtB,CAAX;;AACA,oBAAImB,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACrB,uBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,wBAAIf,GAAG,GAAGW,IAAI,CAACI,CAAD,CAAd;AACAhB,oBAAAA,QAAQ,CAACC,GAAD,CAAR;AACH;;AACD;AACH;;AACDD,gBAAAA,QAAQ,CAACY,IAAD,CAAR;AACH,eA3BD;;AA6BA,cAAA,KAAI,CAACtB,GAAL,CAAS4B,MAAT,GAAmBvB,EAAD,IAAe;AAC7B,oBAAIwB,YAAY,GAAG;AAAA;AAAA,sCAAOC,QAAP,CAAgBC,SAAhB,CAA0BC,IAAI,CAACC,SAAL,CAAexC,eAAf,CAA1B,CAAnB;AACA,oBAAIyC,GAAG,GAAG;AAAA;AAAA,sCAAOtB,OAAP,CAAeuB,MAAf,CAAsB;AAAA;AAAA,sCAAOvB,OAAP,CAAeC,cAArC,EAAqDgB,YAArD,CAAV;;AACA,gBAAA,KAAI,CAAC7B,GAAL,CAASoC,IAAT,CAAcF,GAAG,CAACG,MAAlB;;AAEA/B,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,EAA9B;AACAP,gBAAAA,OAAO,CAACO,EAAD,CAAP;AACH,eAPD;AAQH,aAjDM,CAAP;AAXiD;AA6DpD;;AAEuB,eAATS,SAAS,CAACwB,IAAD,EAAqB,CAE5C;;AAEuB,eAATrB,SAAS,CAACqB,IAAD,EAAqB,CAG5C;;AAEoB,eAANjB,MAAM,CAACiB,IAAD,EAAqB,CAGzC;;AAEoB,eAANnB,MAAM,CAACmB,IAAD,EAAoB;AACrC,cAAM3B,GAAG,GAAG;AAAA;AAAA,gCAAO4B,OAAP,CAAehB,MAAf,CAAsBe,IAAtB,CAAZ;;AACA,cAAI3B,GAAG,CAAC6B,KAAJ,IAAa,4BAAjB,EAA+C;AAC3C,gBAAIC,IAAI,GAAG;AAAA;AAAA,gCAAMC,KAAN,CAAYC,QAAZ,CAAqBpB,MAArB,CAA4BZ,GAAG,CAACI,IAAhC,CAAX;AACAT,YAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDkC,IAAjD;AACH;AACJ;;AAGiB,eAAJG,IAAI,CAACJ,KAAD,EAAgBF,IAAhB,EAA2B;AACzC,eAAKpC,MAAL;AACA,cAAIS,GAAG,GAAG;AAAA;AAAA,gCAAO4B,OAAP,CAAeJ,MAAf,CAAsB,KAAKjC,MAA3B,EAAmC;AAAA;AAAA,gCAAOqC,OAAP,CAAeM,YAAlD,EAAgE,CAAhE,EAAmEL,KAAnE,EAA0EF,IAA1E,CAAV;AACA,cAAIJ,GAAG,GAAG;AAAA;AAAA,gCAAOtB,OAAP,CAAeuB,MAAf,CAAsB;AAAA;AAAA,gCAAOvB,OAAP,CAAeM,SAArC,EAAgDP,GAAhD,CAAV;;AACA,eAAKX,GAAL,CAASoC,IAAT,CAAcF,GAAG,CAACG,MAAlB;;AAGA,eAAKS,UAAL;AACH;;AAGwB,eAAVA,UAAU,GAAG;AACxB1D,UAAAA,KAAK,CAAC2D,IAAN,CACI;AACIxD,YAAAA,IAAI,EAAE;AAAA;AAAA,oCAAQyD,KAAR,CAAcC,IADxB;AAEIzD,YAAAA,IAAI,EAAE;AAAA;AAAA,oCAAQwD,KAAR,CAAcE;AAFxB,WADJ,EAKI,MAAM;AAEF9D,YAAAA,KAAK,CAAC+D,OAAN,CAAc,4BAAd,EAA4C;AAAA;AAAA,gCAAMT,KAAN,CAAYU,OAAZ,CAAoBjB,MAApB,CAA2B;AAAEkB,cAAAA,KAAK,EAAE;AAAA;AAAA,sCAAQC,OAAR,CAAgBC;AAAzB,aAA3B,EAA6DC,MAA7D,EAA5C,EAAoHC,CAAD,IAAY;AAC3H,kBAAIhB,IAAI,GAAG;AAAA;AAAA,kCAAMC,KAAN,CAAYC,QAAZ,CAAqBpB,MAArB,CAA4BkC,CAA5B,CAAX;AACAnD,cAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ,EAA2DkC,IAA3D;AACH,aAHD;AAIH,WAXL;AAYH;;AApHiB,O,GA0HteazD,MAAAA,Q,CAEMgB,G;AAFNhB,MAAAA,Q,CAIMkB,M","sourcesContent":["import proto from \"../../../../proto_js/proto.js\";\nimport { Session } from \"../../logic/login/LoginModel.js\";\nimport { Pomelo } from \"./Pomelo\";\n\n\nconst starx = (window as any).starx\n\nexport class PitayaWs {\n\n    private static _ws: WebSocket;\n\n    private static _reqId: number\n\n    public static async Init(host: string, port: number) {\n\n        let handshakeBuffer = {\n            'sys': {\n                type: \"pitaya_cocos\",\n                version: \"1.0.0\",\n                rsa: {}\n            },\n            'user': {}\n        };\n\n        return new Promise((reslove, reject) => {\n            this._ws = new WebSocket('ws://' + host + \":\" + port);\n            this._reqId = 0;\n            this._ws.binaryType = 'arraybuffer';\n            this._ws.onclose = (ev: Event) => {\n                console.log(\"websocket close\", ev)\n                reject(ev)\n            };\n            this._ws.onerror = (ev: Event) => {\n                console.log(\"websocket err\", ev)\n                reject(ev)\n            };\n            this._ws.onmessage = (ev: any) => {\n                console.log(\"websocket onmessage\", ev)\n                let dispatch = (msg: { type: number, body?: Uint8Array }) => {\n                    switch (msg.type) {\n                        case Pomelo.Package.TYPE_HANDSHAKE:\n                            this.handshake(msg.body)\n                            break\n                        case Pomelo.Package.TYPE_HEARTBEAT:\n                            this.heartbeat(msg.body)\n                            break\n                        case Pomelo.Package.TYPE_DATA:\n                            this.onData(msg.body as ArrayBuffer)\n                            break\n                        case Pomelo.Package.TYPE_KICK:\n                            this.onKick(msg.body)\n                            break\n                    }\n                }\n                let msgs = Pomelo.Package.decode(ev);\n                if (Array.isArray(msgs)) {\n                    for (let i = 0; i < msgs.length; i++) {\n                        let msg = msgs[i];\n                        dispatch(msg)\n                    }\n                    return\n                }\n                dispatch(msgs)\n            };\n\n            this._ws.onopen = (ev: Event) => {\n                let handshakePkg = Pomelo.Protocol.strencode(JSON.stringify(handshakeBuffer))\n                var pkg = Pomelo.Package.encode(Pomelo.Package.TYPE_HANDSHAKE, handshakePkg);\n                this._ws.send(pkg.buffer);\n\n                console.log(\"websocket open\", ev)\n                reslove(ev)\n            };\n        })\n    }\n\n    private static handshake(data?: ArrayBuffer) {\n\n    }\n\n    private static heartbeat(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onKick(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onData(data: ArrayBuffer) {\n        const msg = Pomelo.Message.decode(data);\n        if (msg.route == \"Connector.Handler.CallAuth\") {\n            let resp = proto.lobby.RespAuth.decode(msg.body)\n            console.log(\"Connector.Handler.CallAuth, resp=\", resp)\n        }\n    }\n\n\n    public static Call(route: string, data: any) {\n        this._reqId++;\n        let msg = Pomelo.Message.encode(this._reqId, Pomelo.Message.TYPE_REQUEST, 0, route, data);\n        let pkg = Pomelo.Package.encode(Pomelo.Package.TYPE_DATA, msg)\n        this._ws.send(pkg.buffer);\n\n\n        this.testStartX()\n    }\n\n\n    private static testStartX() {\n        starx.init(\n            {\n                host: Session.WsUrl.Host,\n                port: Session.WsUrl.Port\n            },\n            () => {\n\n                starx.request(\"Connector.Handler.CallAuth\", proto.lobby.ReqAuth.encode({ Token: Session.Account.token }).finish(), (e: any) => {\n                    let resp = proto.lobby.RespAuth.decode(e);\n                    console.log(\" Connector.Handler.CallAuth, success resp= \", resp);\n                });\n            })\n    }\n\n}\n\n\n\n// export class Network extends EventTarget implements ISchedulable {\n\n//     // --- EventTarget begin ---\n\n//     event(name: string, data: any = null) {\n//         if (this.hasEventListener(name)) {\n//             this.emit(name, data);\n//         }\n//         else {\n//             warn('Network.passPack [' + name + '] no listener')\n//         }\n//     }\n//     // --- EventTarget end ---\n\n//     // --- instance begin ---\n//     private static _instance: Network = null;\n//     public static get instance(): Network {\n//         if (!this._instance) this._instance = new Network();\n//         return this._instance;\n//     }\n//     // --- instance end ---\n\n//     // --- ISchedulable begin ---\n//     private _id: string = null;\n//     public get uuid(): string {\n//         if (!this._id) this._id = 'Network-' + new Date().getTime();\n//         return this._id;\n//     }\n//     // --- ISchedulable end ---\n\n//     private _client: SocketClient = null;\n//     public get client(): SocketClient { return this._client; }\n\n//     private _reconnectEnable: boolean = false;\n//     private _reconnecting: boolean = false;\n//     private _reconnectAttempts: number = 0;\n\n//     private _heartbeatPassed: number = 0;\n//     private _heartbeatInterval: number = 0;\n//     private _heartbeatTimeout: number;\n//     private _shouldHeartbeat: boolean = false;\n\n//     private _requestId: number = 1;\n//     public get uniqueRequestId(): number {\n//         this._requestId++;\n//         if (this._requestId >= 40000) this._requestId = 1;\n//         return this._requestId;\n//     }\n\n//     // Map from request id to route\n//     _requestRouteMap: Map<number, number | string> = new Map();\n//     // callback from request id\n//     _requestCallbackMap: Map<number, (data: any) => void> = new Map();\n\n//     _handshakeBuffer: IHandshakeBuffer = {\n//         sys: {\n//             type: JS_WS_CLIENT_TYPE,\n//             version: JS_WS_CLIENT_VERSION,\n//             rsa: {}\n//         },\n//         user: {}\n//     };\n\n//     _routeMap: Map<string, number> = null;\n//     _routeMapBack: Map<number, string> = null;\n\n//     constructor() {\n//         super();\n//         this._client = new SocketClient(this);\n//         Scheduler.enableForTarget(this);\n//         director.getScheduler().schedule(this.heartbeatCheck, this, 0.1, macro.REPEAT_FOREVER, 0, false);\n//     }\n\n//     // --- Socket begin ---\n//     onOpen(socket: SocketClient) {\n//         if (this._reconnecting) {\n//             this.event(Events.RECONNECTED);\n//         }\n//         this.event(Events.CONNECTED);\n//         this.resetReconnect();\n//         var obj = Package.encode(Package.TYPE_HANDSHAKE, Protocol.strencode(JSON.stringify(this._handshakeBuffer)));\n//         this.client.sendBuffer(obj);\n//     }\n\n//     onRecv(socket: SocketClient, data: ArrayBuffer) {\n//         this.processPackage(Package.decode(data));\n\n//         // new package arrived, update the heartbeat timeout\n//         this.renewHeartbeatTimeout();\n//     }\n\n//     onErr(socket: SocketClient) {\n//         this.event(Events.ERROR);\n//     }\n\n//     onClose(socket: SocketClient) {\n//         this.event(Events.CLOSED);\n//         if (this._reconnectEnable && this._reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n//             this._reconnecting = true;\n//             this._reconnectAttempts++;\n//             this._connect();\n//         }\n//     }\n\n//     connectTimeout(socket: SocketClient) {\n//         this.event(Events.ERROR);\n//         if (this._reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n//             this._reconnecting = true;\n//             this._reconnectAttempts++;\n//             this._connect();\n//         }\n//     }\n//     // --- Socket end ---\n\n//     private resetReconnect() {\n//         this._reconnecting = false;\n//         this._reconnectAttempts = 0;\n//     }\n\n//     private renewHeartbeatTimeout() {\n//         this._heartbeatPassed = 0;\n//     }\n\n//     private handshake(data: ArrayBuffer) {\n//         const d: { code: number, sys: { heartbeat: number, dict: any } } = JSON.parse(Protocol.strdecode(data));\n//         if (d && d.code === RES_OLD_CLIENT) {\n//             this.event(Events.HANDSHAKEERROR);\n//             return;\n//         }\n\n//         if (d && d.code !== RES_OK) {\n//             this.event(Events.HANDSHAKEERROR);\n//             return;\n//         }\n\n//         if (d && d.sys && d.sys.heartbeat) {\n//             this._heartbeatInterval = d.sys.heartbeat;              // heartbeat interval\n//             this._heartbeatTimeout = this._heartbeatInterval * 2;   // max heartbeat timeout\n//         } else {\n//             this._heartbeatInterval = 0;\n//             this._heartbeatTimeout = 0;\n//         }\n\n//         if (d && d.sys) {\n//             const dict = d.sys.dict;\n\n//             // Init compress dict\n//             if (dict) {\n//                 this._routeMap = new Map();\n//                 this._routeMapBack = new Map();\n//                 for (const key in dict) {\n//                     if (Object.prototype.hasOwnProperty.call(dict, key)) {\n//                         const value: number = dict[key];\n//                         this._routeMap.set(key, value);\n//                         this._routeMapBack.set(value, key);\n//                     }\n//                 }\n//             }\n//         }\n\n//         this.client.sendBuffer(Package.encode(Package.TYPE_HANDSHAKE_ACK));\n//         this.event(Events.HANDSHAKEOVER);\n//     }\n\n//     private heartbeat(data: ArrayBuffer) {\n//         if (!this._heartbeatInterval) {\n//             // no heartbeat\n//             return;\n//         }\n\n//         this._shouldHeartbeat = true;\n//     }\n\n//     private heartbeatCheck(dt: number) {\n//         if (!this._heartbeatInterval) return;\n\n//         if (!this._client.isConnected) {\n//             this._heartbeatPassed = 0;\n//             return;\n//         }\n\n//         this._heartbeatPassed += dt;\n\n//         if (this._shouldHeartbeat) {\n//             if (this._heartbeatPassed > this._heartbeatInterval) {\n//                 this.client.sendBuffer(Package.encode(Package.TYPE_HEARTBEAT));\n//                 this.renewHeartbeatTimeout();\n//             }\n//             return;\n//         }\n\n//         if (this._heartbeatPassed > this._heartbeatTimeout) {\n//             console.error('server heartbeat timeout');\n//             if (this._reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n//                 this._reconnecting = true;\n//                 this._reconnectAttempts++;\n//                 this._connect();\n//             }\n//         }\n//     }\n\n//     private onData(data: ArrayBuffer) {\n//         const msg = this.decode(data);\n\n//         if (!msg) {\n//             console.error('onData decode failed');\n//             return;\n//         }\n\n//         if (msg.id) {\n//             // if have a id then find the callback function with the request\n//             var cb = this._requestCallbackMap.get(msg.id);\n//             this._requestCallbackMap.delete(msg.id);\n//             cb && cb(msg.body);\n//             return;\n//         }\n\n//         // server push message\n//         this.event(msg.route as string, msg.body);\n//     }\n\n//     onKick(data: ArrayBuffer) {\n//         data = JSON.parse(Protocol.strdecode(data));\n//         this.event(Events.BEENKICKED, data);\n//     }\n\n//     private _messageHandlers: Map<number, (data: ArrayBuffer) => void> = null;\n//     get messageHandlers(): Map<number, (data: ArrayBuffer) => void> {\n//         if (!this._messageHandlers) {\n//             this._messageHandlers = new Map();\n//             this._messageHandlers.set(Package.TYPE_HANDSHAKE, this.handshake.bind(this));\n//             this._messageHandlers.set(Package.TYPE_HEARTBEAT, this.heartbeat.bind(this));\n//             this._messageHandlers.set(Package.TYPE_DATA, this.onData.bind(this));\n//             this._messageHandlers.set(Package.TYPE_KICK, this.onKick.bind(this));\n//         }\n//         return this._messageHandlers;\n//     }\n\n//     private processPackage(msgs: { type: number, body?: Uint8Array } | { type: number, body?: Uint8Array }[]) {\n//         if (Array.isArray(msgs)) {\n//             for (var i = 0; i < msgs.length; i++) {\n//                 var msg = msgs[i];\n//                 this.messageHandlers.get(msg.type)(msg.body);\n//             }\n//         } else {\n//             this.messageHandlers.get(msgs.type)(msgs.body);\n//         }\n//     }\n\n//     private _url: string = null;\n//     private _connect(url: string = null): void {\n//         this._closeConnet();\n\n//         this._url = url || this._url;\n//         this.client.connect(this._url);\n//     }\n\n//     public static connect(url: string): void {\n//         this.instance._connect(url);\n//     }\n\n//     private _closeConnet(): void {\n//         this._reconnecting = false;\n//         this.client.close();\n//     }\n\n//     public static closeConnet(): void {\n//         this.instance._closeConnet();\n//     }\n\n//     public packProto(data: any, protoStruct: any): Uint8Array {\n//         let buffer: Uint8Array = null;\n//         if (data && protoStruct) {\n//             let message: any = null;\n//             if (protoStruct) {\n//                 message = protoStruct.create(data);\n//                 buffer = protoStruct.encode(message).finish();\n//             }\n//         }\n//         return buffer;\n//     }\n\n//     public parseProto(buffer: Uint8Array, protoStruct: any): any {\n//         let decoded: any = null;\n//         if (buffer && buffer.length && protoStruct) {\n//             try {\n//                 decoded = protoStruct.decode(buffer);\n//             }\n//             catch (e) {\n//                 console.error(e);\n//                 decoded = null;\n//             }\n//         }\n//         return decoded;\n//     }\n\n//     private decode(data: string | ArrayBuffer): {\n//         id: number,\n//         route: number | string,\n//         body: any,\n//     } {\n//         // probuff decode\n//         const msg = Message.decode(data);\n\n//         if (msg.id > 0) {\n//             msg.route = this._requestRouteMap.get(msg.id);\n//             this._requestRouteMap.delete(msg.id);\n//             if (!msg.route) {\n//                 return null;\n//             }\n//         }\n\n//         let route = msg.route;\n\n//         // Decompose route from dict\n//         if (msg.compressRoute) {\n//             route = this._routeMapBack.get(route as number);\n//             if (!route) return null;\n\n//             msg.route = route;\n//         }\n\n//         const cmd = Structs.getCmd(route as string);\n//         msg.body = this.parseProto(msg.body, cmd.server);\n//         return msg;\n//     }\n\n//     private encode(reqId: number, route: number | string, msg: any): Uint8Array {\n//         var type = reqId ? Message.TYPE_REQUEST : Message.TYPE_NOTIFY;\n\n//         const cmd = Structs.getCmd(route as string);\n//         msg = this.packProto(msg, cmd.client);\n\n//         var compressRoute = 0;\n//         if (this._routeMap.has(route as string)) {\n//             route = this._routeMap.get(route as string);\n//             compressRoute = 1;\n//         }\n\n//         return Message.encode(reqId, type, compressRoute, route, msg);\n//     }\n\n//     public _request(route: string, msg: any, cb: (data: any) => void) {\n\n//         route = route || msg.route;\n//         if (!route) {\n//             return;\n//         }\n\n//         const reqId = this.uniqueRequestId;\n\n//         this._sendMessage(reqId, route, msg);\n\n//         this._requestCallbackMap.set(reqId, cb);\n//         this._requestRouteMap.set(reqId, route);\n//     }\n\n//     public static request(route: string, msg: any, cb?: (data: any) => void) {\n//         this.instance._request(route, msg, cb);\n//     }\n\n//     private _sendMessage(reqId: number, route: number | string, msg: any): void {\n//         const message = this.encode(reqId, route, msg);\n//         this.client.sendBuffer(Package.encode(Package.TYPE_DATA, message));\n//     }\n\n//     public static notify(route: number | string, msg: any): void {\n//         this.instance._sendMessage(0, route, msg);\n//     }\n// }"]}