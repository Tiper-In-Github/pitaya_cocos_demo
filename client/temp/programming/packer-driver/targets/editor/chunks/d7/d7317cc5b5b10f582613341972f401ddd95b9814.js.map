{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/net/pitaya/Pitaya.ts"],"names":["Pitaya","starx","window","protocol","Protocol","Init","host","port","Promise","resolve","reject","onConnectSuccess","url","connector","ws","WebSocket","binaryType","onclose","ev","console","log","onerror","onmessage","onMessage","onopen","sendHandShake","handshakeBuffer","type","version","rsa","msg","strencode","JSON","stringify","pkg","Package","encode","TYPE_HANDSHAKE","send","buffer","msgs","decode","data","Array","isArray","i","length","dispatch","parse","strdecode","body","code","obj","TYPE_HANDSHAKE_ACK","TYPE_HEARTBEAT","heartbeat","TYPE_DATA","onData","TYPE_KICK","onKick","Message","route","TYPE_RESPONSE","cb","callbacks","get","id","delete","Call","reqId","sendMessage","set","routeMap","TYPE_REQUEST","TYPE_NOTIFY","packet","Map"],"mappings":"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","sourcesContent":["import proto from \"../../../../proto_js/proto.js\";\nimport { Session } from \"../../logic/login/LoginModel\";\nimport { Pomelo } from \"./Pomelo\";\n\nconst starx = (window as any).starx\nconst protocol = (window as any).Protocol\n\n\nexport class Pitaya {\n\n    //websocket\n    private static ws: WebSocket;\n    //回调map\n    private static callbacks = new Map<number, Function>();\n    //路由map\n    private static routeMap = new Map<number, string>();\n    //请求的id,每次请求自增1\n    private static reqId: number = 0\n    //整个pitaya连接成功后的回调\n    private static onConnectSuccess: Function | null = null;\n\n\n    //step1:包装成await/async\n    public static async Init(host: string, port: number) {\n        return new Promise((resolve, reject) => {\n            this.onConnectSuccess = () => {\n                resolve(true)\n            }\n            let url = `ws://${host}:${port}`\n            this.connector(url)\n        })\n    }\n\n    //step2:初始化\n    private static connector(url: string) {\n        this.ws = new WebSocket(url);\n        this.ws.binaryType = 'arraybuffer';\n        this.ws.onclose = (ev: any) => { console.log(\"websocket close\", ev) };\n        this.ws.onerror = (ev: any) => { console.log(\"websocket err\", ev) };\n        this.ws.onmessage = (ev: any) => { this.onMessage(ev) };\n        this.ws.onopen = (ev: any) => {\n            this.sendHandShake()\n        };\n    }\n\n    //step3:发送handshake\n    private static async sendHandShake() {\n        let handshakeBuffer = {\n            'sys': {\n                type: \"pitaya_cocos\",\n                version: \"1.0.0\",\n                rsa: {}\n            },\n            'user': {}\n        };\n        let msg = protocol.Protocol.strencode(JSON.stringify(handshakeBuffer))\n        let pkg = protocol.Package.encode(protocol.Package.TYPE_HANDSHAKE, msg);\n        this.ws.send(pkg.buffer);\n    }\n\n\n    //step4:收到消息,分发\n    private static onMessage(ev: any) {\n        let msgs = protocol.Package.decode(ev.data);\n        if (Array.isArray(msgs)) {\n            for (let i = 0; i < msgs.length; i++) {\n                let msg = msgs[i];\n                this.dispatch(msg)\n            }\n        } else {\n            this.dispatch(msgs)\n        }\n    }\n\n    /**\n     * step5, 解析消息分发器\n     * @param msg 收到的服务器消息\n     * @returns \n     */\n    private static dispatch(msg: { type: number, body?: Uint8Array }) {\n        switch (msg.type) {\n            case protocol.Package.TYPE_HANDSHAKE:\n                {\n                    let data = JSON.parse(protocol.Protocol.strdecode(msg.body as Uint8Array));\n                    console.log(\" handshake msg.code\", data.code)\n                    if (data.code === 501) {\n                        return;\n                    }\n                    if (data.code !== 200) {\n                        return;\n                    }\n\n                    //step6: handshake回应，不然服务器会断开\n                    let obj = protocol.Package.encode(protocol.Package.TYPE_HANDSHAKE_ACK);\n                    this.ws.send(obj.buffer);\n\n                    //step7: 连接成功回调，加到step1的Promise\n                    if (this.onConnectSuccess) {\n                        this.onConnectSuccess()\n                    }\n                }\n                break\n            case protocol.Package.TYPE_HEARTBEAT:\n                this.heartbeat(msg.body)\n                break\n            case protocol.Package.TYPE_DATA:\n                this.onData(msg.body as ArrayBuffer)\n                break\n            case protocol.Package.TYPE_KICK:\n                this.onKick(msg.body)\n                break\n        }\n    }\n\n\n    private static heartbeat(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onKick(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onData(data: ArrayBuffer) {\n        let msg = protocol.Message.decode(data);\n\n        if (msg.route) {\n            console.log(\"on data, msg.route=\", msg.route)\n        }\n\n        if (msg.type = protocol.Message.TYPE_RESPONSE) {\n            var cb = this.callbacks.get(msg.id);\n            this.callbacks.delete(msg.id);\n            if (typeof cb !== 'function') {\n                return;\n            }\n            cb(msg.body);\n        }\n    }\n\n    /**\n     * Call方法，即req-resp模式\n     * @param route 路由\n     * @param msg \n     * @returns \n     */\n    public static async Call(route: string, msg: any) {\n        if (!route) {\n            return;\n        }\n        return new Promise((resolve, reject) => {\n            this.reqId++;\n            this.sendMessage(this.reqId, route, msg);\n            this.callbacks.set(this.reqId, (data: any) => {\n                resolve(data)\n            });\n            this.routeMap.set(this.reqId, route);\n        })\n    };\n\n    private static sendMessage(reqId: number, route: string, data: any) {\n        let type = reqId ? protocol.Message.TYPE_REQUEST : protocol.Message.TYPE_NOTIFY;\n        let msg = protocol.Message.encode(reqId, type, 0, route, data);\n        let packet = protocol.Package.encode(protocol.Package.TYPE_DATA, msg);\n        this.ws.send(packet.buffer);\n    };\n\n\n\n\n}\n\n"]}