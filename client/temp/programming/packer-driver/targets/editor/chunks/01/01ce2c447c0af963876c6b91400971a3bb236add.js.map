{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/net/pitaya/Pitaya.ts"],"names":["Pitaya","Pomelo","starx","window","protocol","Protocol","Init","host","port","url","ws","WebSocket","binaryType","onclose","ev","console","log","onerror","onmessage","onMessage","onopen","sendHandShake","handshakeBuffer","type","version","rsa","msg","strencode","JSON","stringify","pkg","Package","encode","TYPE_HANDSHAKE","send","buffer","msgs","decode","data","Array","isArray","i","length","dispatch","parse","strdecode","body","code","obj","TYPE_HANDSHAKE_ACK","OnConnectSuccess","TYPE_HEARTBEAT","heartbeat","TYPE_DATA","onData","TYPE_KICK","onKick","Message","route","Call","CallAuth","request","cb","reqId","error","sendMessage","callbacks","set","routeMap","TYPE_REQUEST","TYPE_NOTIFY","packet","Map"],"mappings":"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","sourcesContent":["import proto from \"../../../../proto_js/proto.js\";\nimport { Session } from \"../../logic/login/LoginModel\";\nimport { Pomelo } from \"./Pomelo\";\n\nconst starx = (window as any).starx\nconst protocol = (window as any).Protocol\n\n\nexport class Pitaya {\n\n    //websocket\n    private static ws: WebSocket;\n    //回调map\n    private static callbacks = new Map<number, Function>();\n    //路由map\n    private static routeMap = new Map<number, string>();\n    //请求的id,每次请求自增1\n    private static reqId: number = 0\n    //整个pitaya连接成功后的回调\n    public static OnConnectSuccess: Function | null = null;\n\n    //step1:初始化\n    public static Init(host: string, port: number) {\n        let url = `ws://${host}:${port}`\n        this.ws = new WebSocket(url);\n        this.ws.binaryType = 'arraybuffer';\n        this.ws.onclose = (ev: any) => { console.log(\"websocket close\", ev) };\n        this.ws.onerror = (ev: any) => { console.log(\"websocket err\", ev) };\n        this.ws.onmessage = (ev: any) => { this.onMessage(ev) };\n        this.ws.onopen = (ev: any) => {\n            this.sendHandShake()\n        };\n    }\n\n    //step2:发送handshake\n    private static async sendHandShake() {\n        let handshakeBuffer = {\n            'sys': {\n                type: \"pitaya_cocos\",\n                version: \"1.0.0\",\n                rsa: {}\n            },\n            'user': {}\n        };\n        let msg = protocol.strencode(JSON.stringify(handshakeBuffer))\n        let pkg = protocol.Package.encode(protocol.Package.TYPE_HANDSHAKE, msg);\n        this.ws.send(pkg.buffer);\n    }\n\n\n    //step3:收到消息\n    private static onMessage(ev: any) {\n        let msgs = protocol.Package.decode(ev.data);\n        if (Array.isArray(msgs)) {\n            for (let i = 0; i < msgs.length; i++) {\n                let msg = msgs[i];\n                this.dispatch(msg)\n            }\n        } else {\n            this.dispatch(msgs)\n        }\n    }\n\n    /**\n     * 消息分发器\n     * @param msg 收到的服务器消息\n     * @returns \n     */\n    private static dispatch(msg: { type: number, body?: Uint8Array }) {\n        switch (msg.type) {\n            case Pomelo.Package.TYPE_HANDSHAKE:\n                {\n                    let data = JSON.parse(protocol.strdecode(msg.body));\n                    console.log(\" handshake msg.code\", data.code)\n                    if (data.code === 501) {\n                        return;\n                    }\n                    if (data.code !== 200) {\n                        return;\n                    }\n                    //step4: handshake回应，不然服务器会断开\n                    let obj = protocol.Package.encode(protocol.Package.TYPE_HANDSHAKE_ACK);\n                    this.ws.send(obj.buffer);\n\n                    if (this.OnConnectSuccess != null) {\n                        this.OnConnectSuccess()\n                        this.OnConnectSuccess = null\n                    }\n                }\n                break\n            case Pomelo.Package.TYPE_HEARTBEAT:\n                this.heartbeat(msg.body)\n                break\n            case Pomelo.Package.TYPE_DATA:\n                this.onData(msg.body as ArrayBuffer)\n                break\n            case Pomelo.Package.TYPE_KICK:\n                this.onKick(msg.body)\n                break\n        }\n    }\n\n\n    private static heartbeat(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onKick(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onData(data: ArrayBuffer) {\n        let msg = protocol.Message.decode(data);\n        if(msg.route){\n            console.log(\"on data, msg.route=\" , msg.route)\n        }\n\n        if(msg.body){\n            \n        }\n    }\n\n\n    public static Call(route: string, data: any) {\n\n    }\n\n    public static CallAuth() {\n\n    }\n\n    public static request(route: string, msg: any, cb: Function) {\n        if (!route) {\n            return;\n        }\n        this.reqId++;\n        console.error(\"pitaya reqid\", this.reqId);\n        this.sendMessage(this.reqId, route, msg);\n        this.callbacks.set(this.reqId, cb);\n        this.routeMap.set(this.reqId, route);\n    };\n\n    private static sendMessage(reqId: number, route: string, data: any) {\n        let type = reqId ? protocol.Message.TYPE_REQUEST : protocol.Message.TYPE_NOTIFY;\n        let msg = protocol.Message.encode(reqId, type, 0, route, data);\n        let packet = protocol.Package.encode(protocol.Package.TYPE_DATA, msg);\n        this.ws.send(packet.buffer);\n    };\n\n\n\n\n}\n\n"]}