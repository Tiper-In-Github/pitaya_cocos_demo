{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/net/pitaya/Pitaya.ts"],"names":["PitayaWs","proto","Pomelo","Init","url","_ws","WebSocket","binaryType","onopen","ev","console","log","onclose","onerror","onmessage","dispatch","msg","type","Package","TYPE_HANDSHAKE","handshake","body","TYPE_HEARTBEAT","heartbeat","TYPE_DATA","onData","TYPE_KICK","onKick","msgs","decode","Array","isArray","i","length","data","Message","route","resp","lobby","RespAuth"],"mappings":";;;6CAGaA,Q;;;;;;;;;;;;;;;;;;AAHNC,MAAAA,K;;AACEC,MAAAA,M,iBAAAA,M;;;;;;;0BAEIF,Q,GAAN,MAAMA,QAAN,CAAe;AAEA,eAAJG,IAAI,CAACC,GAAD,EAAc;AAC5B,eAAKC,GAAL,GAAW,IAAIC,SAAJ,CAAcF,GAAd,CAAX;AACA,eAAKC,GAAL,CAASE,UAAT,GAAsB,aAAtB;;AACA,eAAKF,GAAL,CAASG,MAAT,GAAmBC,EAAD,IAAe;AAC7BC,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,EAA9B;AACH,WAFD;;AAGA,eAAKJ,GAAL,CAASO,OAAT,GAAoBH,EAAD,IAAe;AAC9BC,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,EAA/B;AACH,WAFD;;AAGA,eAAKJ,GAAL,CAASQ,OAAT,GAAoBJ,EAAD,IAAe;AAC9BC,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,EAA7B;AACH,WAFD;;AAGA,eAAKJ,GAAL,CAASS,SAAT,GAAsBL,EAAD,IAAa;AAC9B,gBAAIM,QAAQ,GAAIC,GAAD,IAA8C;AACzD,sBAAQA,GAAG,CAACC,IAAZ;AACI,qBAAK;AAAA;AAAA,sCAAOC,OAAP,CAAeC,cAApB;AACI,uBAAKC,SAAL,CAAeJ,GAAG,CAACK,IAAnB;AACA;;AACJ,qBAAK;AAAA;AAAA,sCAAOH,OAAP,CAAeI,cAApB;AACI,uBAAKC,SAAL,CAAeP,GAAG,CAACK,IAAnB;AACA;;AACJ,qBAAK;AAAA;AAAA,sCAAOH,OAAP,CAAeM,SAApB;AACI,uBAAKC,MAAL,CAAYT,GAAG,CAACK,IAAhB;AACA;;AACJ,qBAAK;AAAA;AAAA,sCAAOH,OAAP,CAAeQ,SAApB;AACI,uBAAKC,MAAL,CAAYX,GAAG,CAACK,IAAhB;AACA;AAZR;AAcH,aAfD;;AAiBA,gBAAIO,IAAI,GAAG;AAAA;AAAA,kCAAOV,OAAP,CAAeW,MAAf,CAAsBpB,EAAtB,CAAX;;AAEA,gBAAIqB,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACrB,mBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,oBAAIhB,GAAG,GAAGY,IAAI,CAACI,CAAD,CAAd;AACAjB,gBAAAA,QAAQ,CAACC,GAAD,CAAR;AACH;;AACD;AACH;;AAEDD,YAAAA,QAAQ,CAACa,IAAD,CAAR;AACH,WA7BD;AA8BH;;AAEuB,eAATR,SAAS,CAACc,IAAD,EAAqB,CAE5C;;AAEuB,eAATX,SAAS,CAACW,IAAD,EAAqB,CAG5C;;AAEoB,eAANP,MAAM,CAACO,IAAD,EAAqB,CAGzC;;AAEoB,eAANT,MAAM,CAACS,IAAD,EAAoB;AACrC,gBAAMlB,GAAG,GAAG;AAAA;AAAA,gCAAOmB,OAAP,CAAeN,MAAf,CAAsBK,IAAtB,CAAZ;;AACA,cAAIlB,GAAG,CAACoB,KAAJ,IAAa,4BAAjB,EAA+C;AAC3C,gBAAIC,IAAI,GAAG;AAAA;AAAA,gCAAMC,KAAN,CAAYC,QAAZ,CAAqBV,MAArB,CAA4Bb,GAAG,CAACK,IAAhC,CAAX;AACAX,YAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiD0B,IAAjD;AACH;AAGJ;;AApEiB,O;;AAATrC,MAAAA,Q,CACMK,G","sourcesContent":["import proto from \"../../../../proto_js/proto\";\nimport { Pomelo } from \"./pomelo\";\n\nexport class PitayaWs {\n    private static _ws: WebSocket;\n    public static Init(url: string) {\n        this._ws = new WebSocket(url);\n        this._ws.binaryType = 'arraybuffer';\n        this._ws.onopen = (ev: Event) => {\n            console.log(\"websocket open\", ev)\n        };\n        this._ws.onclose = (ev: Event) => {\n            console.log(\"websocket close\", ev)\n        };\n        this._ws.onerror = (ev: Event) => {\n            console.log(\"websocket err\", ev)\n        };\n        this._ws.onmessage = (ev: any) => {\n            let dispatch = (msg: { type: number, body?: Uint8Array }) => {\n                switch (msg.type) {\n                    case Pomelo.Package.TYPE_HANDSHAKE:\n                        this.handshake(msg.body)\n                        break\n                    case Pomelo.Package.TYPE_HEARTBEAT:\n                        this.heartbeat(msg.body)\n                        break\n                    case Pomelo.Package.TYPE_DATA:\n                        this.onData(msg.body as ArrayBuffer)\n                        break\n                    case Pomelo.Package.TYPE_KICK:\n                        this.onKick(msg.body)\n                        break\n                }\n            }\n\n            let msgs = Pomelo.Package.decode(ev);\n\n            if (Array.isArray(msgs)) {\n                for (let i = 0; i < msgs.length; i++) {\n                    let msg = msgs[i];\n                    dispatch(msg)\n                }\n                return\n            }\n\n            dispatch(msgs)\n        };\n    }\n\n    private static handshake(data?: ArrayBuffer) {\n\n    }\n\n    private static heartbeat(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onKick(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onData(data: ArrayBuffer) {\n        const msg = Pomelo.Message.decode(data);\n        if (msg.route == \"Connector.Handler.CallAuth\") {\n            let resp = proto.lobby.RespAuth.decode(msg.body)\n            console.log(\"Connector.Handler.CallAuth, resp=\", resp)\n        }\n\n\n    }\n}   "]}