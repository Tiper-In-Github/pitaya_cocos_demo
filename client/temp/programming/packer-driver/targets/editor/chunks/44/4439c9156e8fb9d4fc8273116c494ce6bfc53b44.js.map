{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/logic/login/LoginController.ts"],"names":["LoginController","proto","Http","PitayaWs","Session","Start","console","log","OnEntry","req","Env","http","ReqEntry","EnumEnv","Dev","GameVersion","ResVersion","Secret","reqByte","encode","finish","respByte","Post","resp","RespEntry","decode","ErrCode","common","ErrorCode","OK","RegisterUrl","LoginUrl","TcpUrl","Host","Port","WsUrl","WebSocketUrl","OnRegister","account","password","Account","Password","ReqRegister","OnLogin","ReqLogin","RespLogin","token","Token","OnConnectorAuth","Init","lobby","ReqAuth","Call"],"mappings":";;;8DAOaA,e;;;;;;;;;;;;;;;;;;;;;;;;;;AAPNC,MAAAA,K;;AACEC,MAAAA,I,iBAAAA,I;;AACAC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,O,iBAAAA,O;;;;;;;iCAIIJ,e,GAAN,MAAMA,eAAN,CAAsB;AAGA,qBAALK,KAAK,GAAG;AACxBC,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,gBAAM,KAAKC,OAAL,EAAN;AACH;;AAE0B,qBAAPA,OAAO,GAAG;AAC1B,cAAIC,GAAyB,GAAG;AAC5BC,YAAAA,GAAG,EAAE;AAAA;AAAA,gCAAMC,IAAN,CAAWC,QAAX,CAAoBC,OAApB,CAA4BC,GADL;AACW;AACvCC,YAAAA,WAAW,EAAE,OAFe;AAG5BC,YAAAA,UAAU,EAAE,OAHgB;AAI5BC,YAAAA,MAAM,EAAE;AAJoB,WAAhC;AAMA,cAAIC,OAAO,GAAG;AAAA;AAAA,8BAAMP,IAAN,CAAWC,QAAX,CAAoBO,MAApB,CAA2BV,GAA3B,EAAgCW,MAAhC,EAAd;AACA,cAAIC,QAAQ,GAAG,MAAM;AAAA;AAAA,4BAAKC,IAAL,CAAU,6BAAV,EAAyCJ,OAAzC,CAArB;AACA,cAAIK,IAAI,GAAG;AAAA;AAAA,8BAAMZ,IAAN,CAAWa,SAAX,CAAqBC,MAArB,CAA4BJ,QAA5B,CAAX;AACAf,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BgB,IAA7B;;AAEA,cAAIA,IAAI,CAACG,OAAL,IAAgB;AAAA;AAAA,8BAAMC,MAAN,CAAaC,SAAb,CAAuBC,EAA3C,EAA+C;AAAA;;AAC3C;AAAA;AAAA,oCAAQC,WAAR,GAAsBP,IAAI,CAACO,WAA3B;AACA;AAAA;AAAA,oCAAQC,QAAR,GAAmBR,IAAI,CAACQ,QAAxB;AACA;AAAA;AAAA,oCAAQC,MAAR,CAAeC,IAAf,mBAAsBV,IAAI,CAACS,MAA3B,qBAAsB,aAAaC,IAAnC;AACA;AAAA;AAAA,oCAAQD,MAAR,CAAeE,IAAf,oBAAsBX,IAAI,CAACS,MAA3B,qBAAsB,cAAaE,IAAnC;AACA;AAAA;AAAA,oCAAQC,KAAR,CAAcF,IAAd,yBAAqBV,IAAI,CAACa,YAA1B,qBAAqB,mBAAmBH,IAAxC;AACA;AAAA;AAAA,oCAAQE,KAAR,CAAcD,IAAd,0BAAqBX,IAAI,CAACa,YAA1B,qBAAqB,oBAAmBF,IAAxC;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACkC,qBAAVG,UAAU,CAACC,OAAD,EAAkBC,QAAlB,EAAoC;AAC9D,cAAI9B,GAA4B,GAAG;AAC/B+B,YAAAA,OAAO,EAAEF,OADsB;AAE/BG,YAAAA,QAAQ,EAAEF;AAFqB,WAAnC;AAIA,cAAIrB,OAAO,GAAG;AAAA;AAAA,8BAAMP,IAAN,CAAW+B,WAAX,CAAuBvB,MAAvB,CAA8BV,GAA9B,EAAmCW,MAAnC,EAAd;AACA,cAAIC,QAAQ,GAAG,MAAM;AAAA;AAAA,4BAAKC,IAAL,CAAU;AAAA;AAAA,kCAAQQ,WAAlB,EAA+BZ,OAA/B,CAArB;AACA,cAAIK,IAAI,GAAG;AAAA;AAAA,8BAAMZ,IAAN,CAAWa,SAAX,CAAqBC,MAArB,CAA4BJ,QAA5B,CAAX;AACAf,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCgB,IAAhC;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAC+B,qBAAPoB,OAAO,CAACL,OAAD,EAAkBC,QAAlB,EAAoC;AAC3D,cAAI9B,GAAyB,GAAG;AAC5B+B,YAAAA,OAAO,EAAEF,OADmB;AAE5BG,YAAAA,QAAQ,EAAEF;AAFkB,WAAhC;AAIA,cAAIrB,OAAO,GAAG;AAAA;AAAA,8BAAMP,IAAN,CAAWiC,QAAX,CAAoBzB,MAApB,CAA2BV,GAA3B,EAAgCW,MAAhC,EAAd;AACA,cAAIC,QAAQ,GAAG,MAAM;AAAA;AAAA,4BAAKC,IAAL,CAAU;AAAA;AAAA,kCAAQS,QAAlB,EAA4Bb,OAA5B,CAArB;AACA,cAAIK,IAAI,GAAG;AAAA;AAAA,8BAAMZ,IAAN,CAAWkC,SAAX,CAAqBpB,MAArB,CAA4BJ,QAA5B,CAAX;AACAf,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BgB,IAA7B;AACA;AAAA;AAAA,kCAAQiB,OAAR,CAAgBM,KAAhB,GAAwBvB,IAAI,CAACwB,KAA7B;AACH;AAGD;AACJ;AACA;AACA;AACA;AACA;;;AACuC,qBAAfC,eAAe,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA,oCAASC,IAAT,CAAc;AAAA;AAAA,kCAAQlB,QAAtB;AAGA,cAAIb,OAAO,GAAG;AAAA;AAAA,8BAAMgC,KAAN,CAAYC,OAAZ,CAAoBhC,MAApB,CAA2B;AAAE4B,YAAAA,KAAK,EAAE;AAAA;AAAA,oCAAQP,OAAR,CAAgBM;AAAzB,WAA3B,EAA6D1B,MAA7D,EAAd;AACA;AAAA;AAAA,oCAASgC,IAAT,CAAc,4BAAd,EAA2ClC,OAA3C;AACH;;AA5FwB,O","sourcesContent":["import proto from \"../../../../proto_js/proto.js\";\nimport { Http } from \"../../net/http/Http\";\nimport { PitayaWs } from \"../../net/pitaya/Pitaya.js\";\nimport { Session } from \"./LoginModel\";\n\n\n\nexport class LoginController {\n\n\n    public static async Start() {\n        console.log(\"LoginController Start!\")\n        await this.OnEntry()\n    }\n\n    public static async OnEntry() {\n        let req: proto.http.IReqEntry = {\n            Env: proto.http.ReqEntry.EnumEnv.Dev,  //测试的客户端\n            GameVersion: \"1.0.0\",\n            ResVersion: \"1.0.0\",\n            Secret: \"s88it786hihfbwsdfgxtxcv_ysdyxv\",\n        }\n        let reqByte = proto.http.ReqEntry.encode(req).finish()\n        let respByte = await Http.Post(\"http://127.0.0.1:8088/entry\", reqByte)\n        let resp = proto.http.RespEntry.decode(respByte)\n        console.log(\"OnEntry resp=\", resp)\n\n        if (resp.ErrCode == proto.common.ErrorCode.OK) {\n            Session.RegisterUrl = resp.RegisterUrl\n            Session.LoginUrl = resp.LoginUrl\n            Session.TcpUrl.Host = resp.TcpUrl?.Host as string\n            Session.TcpUrl.Port = resp.TcpUrl?.Port as number\n            Session.WsUrl.Host = resp.WebSocketUrl?.Host as string\n            Session.WsUrl.Port = resp.WebSocketUrl?.Port as number\n        }\n    }\n\n    /**\n     * 注册\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnRegister(account: string, password: string) {\n        let req: proto.http.IReqRegister = {\n            Account: account,\n            Password: password,\n        }\n        let reqByte = proto.http.ReqRegister.encode(req).finish()\n        let respByte = await Http.Post(Session.RegisterUrl, reqByte)\n        let resp = proto.http.RespEntry.decode(respByte)\n        console.log(\"OnRegister resp=\", resp)\n    }\n\n    /**\n     * 登录\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnLogin(account: string, password: string) {\n        let req: proto.http.IReqLogin = {\n            Account: account,\n            Password: password,\n        }\n        let reqByte = proto.http.ReqLogin.encode(req).finish()\n        let respByte = await Http.Post(Session.LoginUrl, reqByte)\n        let resp = proto.http.RespLogin.decode(respByte)\n        console.log(\"OnLogin resp=\", resp)\n        Session.Account.token = resp.Token\n    }\n\n\n    /**\n     * 断开gate服务器，转而连接connector服务器，连接需要检测登录的授权码\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnConnectorAuth() {\n        // //先与gate服务器断开连接\n        // PinusUtil.disconnect()\n        // //再与connector服务器连接\n        // await PinusUtil.init(Session.host, Session.port)\n        // //创建req\n        // let req: ProtocolConnector.Auth.Request = new ProtocolConnector.Auth.Request()\n        // req.token = Session.account.token\n        // req.uid = Session.account.uid\n        // //进行登录验证\n        // let resp = await PinusUtil.call<ProtocolConnector.Auth.Request, ProtocolConnector.Auth.Response>(ProtocolConnector.Auth.Router, req)\n        // if (resp.errCode != ErrorCode.SUCCEED) {\n        //     console.log(ErrorCode2Str(resp.errCode))\n        //     return\n        // }\n        PitayaWs.Init(Session.LoginUrl)\n\n\n        let reqByte = proto.lobby.ReqAuth.encode({ Token: Session.Account.token }).finish()\n        PitayaWs.Call(\"Connector.Handler.CallAuth\",reqByte)\n    }\n\n\n}"]}