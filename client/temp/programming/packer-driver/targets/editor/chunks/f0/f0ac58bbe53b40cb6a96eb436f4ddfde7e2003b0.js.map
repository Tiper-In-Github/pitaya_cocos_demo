{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/net/pitaya/Pitaya.ts"],"names":["PitayaWs","proto","Pomelo","starx","window","protocol","Protocol","Init","host","port","handshakeBuffer","type","version","rsa","Promise","reslove","reject","_ws","WebSocket","reqId","binaryType","onclose","ev","console","log","onerror","onmessage","dispatch","msg","Package","TYPE_HANDSHAKE","data","JSON","parse","strdecode","body","code","RES_OLD_CLIENT","RES_OK","TYPE_HEARTBEAT","heartbeat","TYPE_DATA","onData","TYPE_KICK","onKick","msgs","decode","Array","isArray","i","length","onopen","handshakePkg","strencode","stringify","pkg","encode","send","buffer","Call","route","CallAuth","token","reqByte","lobby","ReqAuth","Token","finish","request","StartXCallAuth","init","error","e","resp","RespAuth","cb","sendMessage","callbacks","set","routeMap","encodeMsg","packet","Message","TYPE_REQUEST","TYPE_NOTIFY","Map","RES_FAIL"],"mappings":"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","sourcesContent":["import proto from \"../../../../proto_js/proto.js\";\nimport { Session } from \"../../logic/login/LoginModel\";\nimport { Pomelo } from \"./Pomelo\";\n\n\nconst starx = (window as any).starx\nconst protocol = (window as any).Protocol\nexport class PitayaWs {\n\n    private static _ws: WebSocket;\n    private static callbacks = new Map<number, Function>();\n    private static routeMap = new Map<number, string>();\n    private static reqId: number\n\n    public static async Init(host: string, port: number) {\n\n        let handshakeBuffer = {\n            'sys': {\n                type: \"pitaya_cocos\",\n                version: \"1.0.0\",\n                rsa: {}\n            },\n            'user': {}\n        };\n\n        return new Promise((reslove, reject) => {\n            this._ws = new WebSocket('ws://localhost:3250');\n            this.reqId = 0;\n            this._ws.binaryType = 'arraybuffer';\n            this._ws.onclose = (ev: Event) => {\n                console.log(\"websocket close\", ev)\n                reject(false)\n            };\n            this._ws.onerror = (ev: Event) => {\n                console.log(\"websocket err\", ev)\n                reject(false)\n            };\n            this._ws.onmessage = (ev: any) => {\n                let dispatch = (msg: { type: number, body?: Uint8Array }) => {\n                    switch (msg.type) {\n                        case Pomelo.Package.TYPE_HANDSHAKE:\n                            {\n                                let data = JSON.parse(protocol.strdecode(msg.body));\n                                console.log(\" handshake msg.code\", data.code)\n                                if (data.code === this.RES_OLD_CLIENT) {\n                                    // starx.emit('error', 'client version not fullfill');\n                                    return;\n                                }\n                                if (data.code !== this.RES_OK) {\n                                    // starx.emit('error', 'handshake fail');\n                                    return;\n                                }\n                                \n                                reslove(true)\n                            }\n                            break\n                        case Pomelo.Package.TYPE_HEARTBEAT:\n                            this.heartbeat(msg.body)\n                            break\n                        case Pomelo.Package.TYPE_DATA:\n                            this.onData(msg.body as ArrayBuffer)\n                            break\n                        case Pomelo.Package.TYPE_KICK:\n                            this.onKick(msg.body)\n                            break\n                    }\n                }\n                let msgs = protocol.Package.decode(ev.data);\n                console.log(\"websocket onmessage\", msgs)\n                if (Array.isArray(msgs)) {\n                    for (let i = 0; i < msgs.length; i++) {\n                        let msg = msgs[i];\n                        dispatch(msg)\n                    }\n                } else {\n                    dispatch(msgs)\n                }\n\n                console.log(\"websocket on message ,reslove\")\n               \n            };\n\n            this._ws.onopen = (ev: Event) => {\n                let handshakePkg = protocol.strencode(JSON.stringify(handshakeBuffer))\n                var pkg = protocol.Package.encode(protocol.Package.TYPE_HANDSHAKE, handshakePkg);\n                this._ws.send(pkg.buffer);\n            };\n\n\n        })\n    }\n\n    private static RES_OK = 200;\n    private static RES_FAIL = 500;\n    private static RES_OLD_CLIENT = 501;\n   \n\n    private static heartbeat(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onKick(data?: ArrayBuffer) {\n\n\n    }\n\n    private static onData(data: ArrayBuffer) {\n        // const msg = Pomelo.Message.decode(data);\n        // if (msg.route == \"Connector.Handler.CallAuth\") {\n        //     let resp = proto.lobby.RespAuth.decode(msg.body)\n        //     console.log(\"Connector.Handler.CallAuth, resp=\", resp)\n        // }\n    }\n\n\n    public static Call(route: string, data: any) {\n        // console.log(\" pitaya call\")\n        // this.reqId++;\n        // let msg = protocol.Message.encode(this.reqId, Pomelo.Message.TYPE_REQUEST, 0, route, data);\n        // let pkg = protocol.Package.encode(Pomelo.Package.TYPE_DATA, msg)\n        // // let msg = Pomelo.Message.encode(this._reqId, Pomelo.Message.TYPE_REQUEST, 0, route, data);\n        // // let pkg = Pomelo.Package.encode(Pomelo.Package.TYPE_DATA, msg)\n        // this._ws.send(pkg.buffer);\n        // this.testStartX()\n    }\n\n    public static CallAuth() {\n        let token = \"aa\"\n        console.log(\"startx token \", token)\n        let reqByte = proto.lobby.ReqAuth.encode({ Token: token }).finish()\n        console.log(\" pitaya 1-1 1-1 1-1 reqByte \", reqByte);\n        this.request(\"Connector.Handler.CallAuth\", reqByte, () => { })\n    }\n\n\n    public static StartXCallAuth() {\n        starx.init(\n            {\n                host: \"localhost\",//Session.WsUrl.Host,\n                port: 3250,//Session.WsUrl.Port\n            },\n            () => {\n                let token = \"aa\"\n                console.log(\"startx token \", token)\n                let reqByte = proto.lobby.ReqAuth.encode({ Token: token }).finish();\n                console.error(\"startx 2-1 2-1 2-1 \", reqByte);\n                starx.request(\"Connector.Handler.CallAuth\", reqByte, (e: any) => {\n                    let resp = proto.lobby.RespAuth.decode(e);\n                    console.log(\" Connector.Handler.CallAuth, success resp= \", resp);\n                });\n            })\n    }\n\n\n    private static request(route: string, msg: any, cb: Function) {\n        if (!route) {\n            return;\n        }\n\n        this.reqId++;\n\n        console.error(\"pitaya reqid\", this.reqId);\n\n        this.sendMessage(this.reqId, route, msg);\n        this.callbacks.set(this.reqId, cb);\n        this.routeMap.set(this.reqId, route);\n    };\n\n    private static sendMessage(reqId: number, route: string, msg: any) {\n        var encodeMsg = this.encode(reqId, route, msg);\n        console.log(\" pitaya  1-2 1-2 1-2     msg \", encodeMsg)\n        var packet = protocol.Package.encode(protocol.Package.TYPE_DATA, encodeMsg);\n        console.log(\" pitaya  1-3 1-3 1-3     packet \", packet)\n        this.send(packet);\n    };\n\n    private static send(packet: any) {\n        this._ws.send(packet);\n    };\n\n    private static encode(reqId: number, route: string, msg: any) {\n        var type = reqId ? protocol.Message.TYPE_REQUEST : protocol.Message.TYPE_NOTIFY;\n        return protocol.Message.encode(reqId, type, 0, route, msg);\n    }\n}\n\n"]}