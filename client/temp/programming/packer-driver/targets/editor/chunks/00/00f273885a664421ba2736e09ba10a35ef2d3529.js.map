{"version":3,"sources":["file:///Users/even/workspace/github/pitaya_cocos_demo/client/assets/scripts/logic/login/LoginController.ts"],"names":["LoginController","proto","Http","Start","console","log","OnEntry","req","http","ReqEntry","Env","EnumEnv","Dev","GameVersion","ResVersion","Secret","respByte","Post","encode","resp","RespEntry","decode","OnRegister","account","password","OnLogin","OnConnectorAuth"],"mappings":";;;2CAMaA,e;;;;;;;;;;;;;;;;;;AANNC,MAAAA,K;;AACEC,MAAAA,I,iBAAAA,I;;;;;;;iCAKIF,e,GAAN,MAAMA,eAAN,CAAsB;AAGA,qBAALG,KAAK,GAAG;AACxBC,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,gBAAM,KAAKC,OAAL,EAAN;AACH;;AAG0B,qBAAPA,OAAO,GAAG;AAC1B,cAAIC,GAAG,GAAG,IAAI;AAAA;AAAA,8BAAMC,IAAN,CAAWC,QAAf,EAAV;AACAF,UAAAA,GAAG,CAACG,GAAJ,GAAU;AAAA;AAAA,8BAAMF,IAAN,CAAWC,QAAX,CAAoBE,OAApB,CAA4BC,GAAtC,CAF0B,CAEmB;;AAC7CL,UAAAA,GAAG,CAACM,WAAJ,GAAkB,OAAlB;AACAN,UAAAA,GAAG,CAACO,UAAJ,GAAiB,OAAjB;AACAP,UAAAA,GAAG,CAACQ,MAAJ,GAAa,gCAAb;AAEA,cAAIC,QAAQ,GAAG,MAAM;AAAA;AAAA,4BAAKC,IAAL,CAAU,sBAAV,EAAkC;AAAA;AAAA,8BAAMT,IAAN,CAAWC,QAAX,CAAoBS,MAApB,CAA2BX,GAA3B,CAAlC,CAArB;AACA,cAAIY,IAAI,GAAG;AAAA;AAAA,8BAAMX,IAAN,CAAWY,SAAX,CAAqBC,MAArB,CAA4BL,QAA5B,CAAX;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bc,IAA7B;AACH;AAID;AACJ;AACA;AACA;AACA;AACA;;;AACkC,qBAAVG,UAAU,CAACC,OAAD,EAAkBC,QAAlB,EAAoC,CAEjE;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAC+B,qBAAPC,OAAO,CAACF,OAAD,EAAkBC,QAAlB,EAAoC,CAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AAGD;AACJ;AACA;AACA;AACA;AACA;;;AACuC,qBAAfE,eAAe,GAAG,CAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AA5EwB,O","sourcesContent":["import proto from \"../../../../proto_js/proto.js\";\nimport { Http } from \"../../net/http/Http\";\nimport { Session } from \"./LoginModel\";\n\n\n\nexport class LoginController {\n\n\n    public static async Start() {\n        console.log(\"LoginController Start!\")\n        await this.OnEntry()\n    }\n\n\n    public static async OnEntry() {\n        let req = new proto.http.ReqEntry()\n        req.Env = proto.http.ReqEntry.EnumEnv.Dev;   //测试的客户端\n        req.GameVersion = \"1.0.0\"\n        req.ResVersion = \"1.0.0\"\n        req.Secret = \"s88it786hihfbwsdfgxtxcv_ysdyxv\"\n\n        let respByte = await Http.Post(\"127.0.0.1:8088/entry\", proto.http.ReqEntry.encode(req))\n        let resp = proto.http.RespEntry.decode(respByte)\n        console.log(\"OnEntry resp=\", resp)\n    }\n\n\n\n    /**\n     * 注册\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnRegister(account: string, password: string) {\n\n    }\n\n    /**\n     * 登录\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnLogin(account: string, password: string) {\n        // let req: ProtocolGate.Login.Request = new ProtocolGate.Login.Request();\n        // req.account = account\n        // req.password = password\n        // let resp = await PinusUtil.call<ProtocolGate.Login.Request, ProtocolGate.Login.Response>(ProtocolGate.Login.Router, req)\n        // if (resp.errCode != ErrorCode.SUCCEED) {\n        //     console.log(ErrorCode2Str(resp.errCode))\n        //     return\n        // }\n        // Session.account.uid = resp.uid\n        // Session.account.token = resp.token\n        // Session.host = resp.host\n        // Session.port = resp.port\n    }\n\n\n    /**\n     * 断开gate服务器，转而连接connector服务器，连接需要检测登录的授权码\n     * @param account \n     * @param password \n     * @returns \n     */\n    public static async OnConnectorAuth() {\n        // //先与gate服务器断开连接\n        // PinusUtil.disconnect()\n        // //再与connector服务器连接\n        // await PinusUtil.init(Session.host, Session.port)\n        // //创建req\n        // let req: ProtocolConnector.Auth.Request = new ProtocolConnector.Auth.Request()\n        // req.token = Session.account.token\n        // req.uid = Session.account.uid\n        // //进行登录验证\n        // let resp = await PinusUtil.call<ProtocolConnector.Auth.Request, ProtocolConnector.Auth.Response>(ProtocolConnector.Auth.Router, req)\n        // if (resp.errCode != ErrorCode.SUCCEED) {\n        //     console.log(ErrorCode2Str(resp.errCode))\n        //     return\n        // }\n    }\n\n\n}"]}